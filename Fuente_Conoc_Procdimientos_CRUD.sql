
-----------------------------------------------------PROCEDIMIENTOS ALMACENADOS ESTUDIANTES
---Estudiantes CREATE
CREATE OR ALTER PROCEDURE GUARDAR_ESTUDIANTE(@ID_EST VARCHAR(20),@NOM_EST VARCHAR(20),@APELL1 VARCHAR(20),@APELL2 VARCHAR(20),@FECHA_NAC DATE, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO ESTUDIANTES(ID_ESTUDIANTE,NOMBRE_ESTUDIANTE,APELLIDO1,APELLIDO2,FECHA_NACIMIENTO)
				VALUES(@ID_EST,@NOM_EST,@APELL1,@APELL2,@FECHA_NAC)
			SET @MSJ = 'Estudiante ingresado correctamente'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @ID_EST VARCHAR(20), @NOMB_EST VARCHAR(20), @APELL1 VARCHAR(20), @APELL2 VARCHAR(20), @FECHA_NAC DATE, @MSJ VARCHAR(100)
	SET @ID_EST = '872642240'
 	SET @NOMB_EST = 'Arnoldo' 
	SET @APELL1 = 'Mandela'
	SET @APELL2 = 'Rolby'
	SET @FECHA_NAC = '19950129'
EXECUTE [DBO].[GUARDAR_ESTUDIANTE]
	@ID_EST, @NOMB_EST, @APELL1, @APELL2, @FECHA_NAC, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--Estudiantes UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_ESTUDIANTE(@CARNET INT,@ID_EST VARCHAR(20),@NOM_EST VARCHAR(20),@APELL1 VARCHAR(20),@APELL2 VARCHAR(20),@FECHA_NAC DATE, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE ESTUDIANTES SET NOMBRE_ESTUDIANTE= @NOM_EST,
								   APELLIDO1=@APELL1,
								   APELLIDO2=@APELL2,
								   FECHA_NACIMIENTO=@FECHA_NAC
			WHERE CARNET =@CARNET
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @ID_EST VARCHAR(20), @NOMB_EST VARCHAR(20), @APELL1 VARCHAR(20), @APELL2 VARCHAR(20), @FECHA_NAC DATE, @MSJ VARCHAR(100)
	SET @ID_EST = 
 	SET @NOMB_EST = 
	SET @APELL1 = 
	SET @APELL2 = 
	SET @FECHA_NAC = 
EXECUTE [DBO].[ACTUALIZAR_ESTUDIANTE]
	@ID_EST, @NOMB_EST, @APELL1, @APELL2, @FECHA_NAC, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--Estudiante DELETE
CREATE OR ALTER PROCEDURE DELETEAR_ESTUDIANTE(@ID_EST VARCHAR(20), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM ESTUDIANTES
			WHERE ID_ESTUDIANTE = @ID_EST
			IF NOT EXISTS(SELECT 1 FROM ESTUDIANTES WHERE ID_ESTUDIANTE = @ID_EST)
				BEGIN
					SET @MSJ = 'No hay estudiante con esa identificacion'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @ID_EST VARCHAR(20),@MSJ VARCHAR(100)
	SET @ID_EST = 

EXECUTE [DBO].[DELETEAR_ESTUDIANTE]
	@ID_EST,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--Estudiante VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_ESTUDIANTE(@ID_EST VARCHAR(20), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM ESTUDIANTES
			WHERE ID_ESTUDIANTE = @ID_EST
			IF NOT EXISTS(SELECT 1 FROM ESTUDIANTES WHERE ID_ESTUDIANTE = @ID_EST)
				BEGIN
					SET @MSJ = 'No hay estudiante con esa identificacion'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @ID_EST VARCHAR(20),@MSJ VARCHAR(100)
	SET @ID_EST = 

EXECUTE [DBO].[VISUALIZAR_ESTUDIANTE]
	@ID_EST,@MSJ OUTPUT
	PRINT @MSJ
GO
*/
-----------------------Procesos Almacenados MATRICULAS
---MATRICULAS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_MATRICULA(@CARNET VARCHAR(20),@MONTO DECIMAL,@ES_MAT VARCHAR(3),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO MATRICULAS(CARNET,MONTO,ESTADO_M)
				VALUES(@CARNET,@MONTO,@ES_MAT)
			SET @MSJ = 'Se ha creado la matricula'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @CARNET VARCHAR(20),@MONTO DECIMAL,@ES_MAT VARCHAR(3),@MSJ VARCHAR(100)
	SET @CARNET = 
 	SET @MONTO =  
	SET @ES_MAT = 

EXECUTE [DBO].[GUARDAR_MATRICULA]
	@CARNET,@MONTO,@ES_MAT, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATRICULAS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_MATRICULA(@N_MATRICULA INT,@CARNET VARCHAR(20),@MONTO DECIMAL,@ES_MAT VARCHAR(3),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE MATRICULAS SET CARNET= @CARNET,
								   MONTO= @MONTO,
								   ESTADO_M=@ES_MAT
			WHERE NUM_MATRICULA = @N_MATRICULA
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @N_MATRICULA INT,@CARNET VARCHAR(20),@MONTO DECIMAL,@ES_MAT VARCHAR(3),@MSJ VARCHAR(100)
	SET @CARNET =
 	SET @MONTO = 
	SET @ES_MAT = 
EXECUTE [DBO].[ACTUALIZAR_MATRICULA]
	@N_MATRICULA,@CARNET,@MONTO,@ES_MAT, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATRICULAS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_MATRICULA(@N_MATRICULA INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM MATRICULAS
			WHERE NUM_MATRICULA = @N_MATRICULA
			IF NOT EXISTS(SELECT 1 FROM MATRICULAS WHERE NUM_MATRICULA = @N_MATRICULA)
				BEGIN
					SET @MSJ = 'No hay matricula con este numero'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @N_MATRICULA INT,@MSJ VARCHAR(100)
	SET @N_MATRICULA = 

EXECUTE [DBO].[DELETEAR_MATRICULA]
	@N_MATRICULA,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATRICULAS VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_MATRICULA(@N_MATRICULA INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM MATRICULAS
			WHERE NUM_MATRICULA = @N_MATRICULA
			IF NOT EXISTS(SELECT 1 FROM MATRICULAS WHERE NUM_MATRICULA = @N_MATRICULA)
				BEGIN
					SET @MSJ = 'No hay matricula con este numero'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @N_MATRICULA INT ,@MSJ VARCHAR(100)
	SET @N_MATRICULA = 

EXECUTE [DBO].[VISUALIZAR_MATRICULA]
	@N_MATRICULA,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

-----------------------Procesos Almacenados PROFESORES
---PROFESORES CREATE
CREATE OR ALTER PROCEDURE GUARDAR_PROFESOR(@ID_PROF VARCHAR(20),@NOMB_PROF VARCHAR(20),@APELL1_PR VARCHAR(20),@APELL2 VARCHAR(20),@TELF VARCHAR(20),@EST_PROF VARCHAR(3),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO PROFESORES(ID_PROFESOR,NOMBRE_PROFESOR,APELLIDO1,APELLIDO2,TELEFONO,ESTADO_P)
				VALUES(@ID_PROF,@NOMB_PROF,@APELL1_PR,@APELL2,@TELF,@EST_PROF)
			SET @MSJ = 'Se ha agregado el profesor'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @ID_PROF VARCHAR(20),@NOMB_PROF VARCHAR(20),@APELL1_PR VARCHAR(20),@APELL2 VARCHAR(20),@TELF VARCHAR(20),@EST_PROF VARCHAR(3),@MSJ VARCHAR(100)
	SET @ID_PROF = 
 	SET @NOMB_PROF =  
	SET @APELL1_PROF = 
	SET @APELL2 =
	SET @TELF =
	SET @EST_PROF =

EXECUTE [DBO].[GUARDAR_PROFESOR]
	ID_PROF,@NOMB_PROF,@APELL1_PR,@APELL2,@TELF,@EST_PROF, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PROFESORES UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_PROFESOR(@COD_PROF INT,@ID_PROF VARCHAR(20),@NOMB_PROF VARCHAR(20),@APELL1_PR VARCHAR(20),@APELL2 VARCHAR(20),@TELF VARCHAR(20),@EST_PROF VARCHAR(3),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE PROFESORES SET ID_PROFESOR = @ID_PROF,
								   NOMBRE_PROFESOR = @NOMB_PROF,
								   APELLIDO1 = @APELL1_PR,
								   APELLIDO2= @APELL2,
								   TELEFONO = @TELF,
								   ESTADO_P = @EST_PROF
			WHERE COD_PROF = @COD_PROF
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @COD_PROF INT,@ID_PROF VARCHAR(20),@NOMB_PROF VARCHAR(20),@APELL1_PR VARCHAR(20),@APELL2 VARCHAR(20),@TELF VARCHAR(20),@EST_PROF VARCHAR(3),@MSJ VARCHAR(100)
	SET @ID_PROF = 
 	SET @NOMB_PROF =  
	SET @APELL1_PROF = 
	SET @APELL2 =
	SET @TELF =
	SET @EST_PROF =

EXECUTE [DBO].[ACTUALIZAR_PROFESOR]
	@ID_PROF,@NOMB_PROF,APELL1_PROF,@APELL2,@TELF,@EST_PROF,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PROFESORES DELETE
CREATE OR ALTER PROCEDURE DELETEAR_PROFESOR(@COD_PROF INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM PROFESORES
			WHERE COD_PROF = @COD_PROF
			IF NOT EXISTS(SELECT 1 FROM PROFESORES WHERE COD_PROF = @COD_PROF)
				BEGIN
					SET @MSJ = 'No hay profesor con este codigo'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_PROF INT,@MSJ VARCHAR(100)
	SET @COD_PROF = 

EXECUTE [DBO].[DELETEAR_PROFESOR]
	@COD_PROF,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PROFESORES VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_PROFESOR(@COD_PROFESOR INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM PROFESORES
			WHERE COD_PROF = @COD_PROFESOR
			IF NOT EXISTS(SELECT 1 FROM PROFESORES WHERE COD_PROF = @COD_PROFESOR)
				BEGIN
					SET @MSJ = 'No hay profesor con ese codigo'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_PROFESOR INT ,@MSJ VARCHAR(100)
	SET @COD_PROFESOR = 

EXECUTE [DBO].[VISUALIZAR_MATRICULA]
	@COD_PROFESOR,@MSJ OUTPUT
	PRINT @MSJ
GO
*/





-----------------------Procesos Almacenados AGENDA FERIADOS
---FERIADOS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_FERIADOS(@FECHA TIME,@ANIO SMALLINT,@DESCRIP VARCHAR(50),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO AGENDA_FERIADOS(FECHA,ANIO,DESCRIPCION)
				VALUES(@FECHA,@ANIO,@DESCRIP)
			SET @MSJ = 'Se ha agregado el día feriado'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @FECHA,@ANIO,@DESCRIP,@MSJ VARCHAR(100)
	SET @FECHA=
	SET @ANIO=
	SET @DESCRIP = 

EXECUTE [DBO].[GUARDAR_FERIADOS]
	@FECHA,@ANIO,@DESCRIP, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--FERIADOS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_FERIADOS(@FECHA DATE,@ANIO SMALLINT,@DESCRIP VARCHAR(50),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE AGENDA_FERIADOS SET FECHA = @FECHA,
								   ANIO = @ANIO,
								   DESCRIPCION = @DESCRIP
			WHERE FECHA = @FECHA
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @FECHA DATE,@ANIO SMALLINT,@DESCRIP VARCHAR(50),@MSJ VARCHAR(100)
	SET @FECHA = 
 	SET @ANIO =  
	SET @DESCRIP =

EXECUTE [DBO].[ACTUALIZAR_FERIADOS]
	@FECHA,@ANIO,@DESCRIP,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--FERIADOS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_FERIADOS(@FECHA DATE, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM AGENDA_FERIADOS
			WHERE FECHA = @FECHA
			IF NOT EXISTS(SELECT 1 FROM AGENDA_FERIADOS WHERE @FECHA = @FECHA)
				BEGIN
					SET @MSJ = 'No existe esta fecha en la tabla'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @FECHA DATE,@MSJ VARCHAR(100)
	SET @FECHA = 

EXECUTE [DBO].[DELETEAR_FERIADO]
	@FECHA,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--FERIADO VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_FERIADOS(@FECHA DATE, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM AGENDA_FERIADOS
			WHERE FECHA = @FECHA
			IF NOT EXISTS(SELECT 1 FROM AGENDA_FERIADOS WHERE FECHA = @FECHA)
				BEGIN
					SET @MSJ = 'No existe esta fecha en la tabla'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @FECHA DATE,@MSJ VARCHAR(100)
	SET @FECHA = 

EXECUTE [DBO].[VISUALIZAR_FERIADOS]
	@FECHA,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

-----------------------Procesos Almacenados AGENDA_ANIOS

---ANIOS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_ANIO(@ANIO SMALLINT,@CANTIDAD_FER INT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO AGENDAS_ANIOS(ANIO,CANTIDAD_FERIADOS)
				VALUES(@ANIO, @CANTIDAD_FER)
			SET @MSJ = 'Se ha agregado el año'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @ANIO SMALLINT, @CANTIDAD_FER INT,@MSJ VARCHAR(100)
	SET @ANIO=
	SET @CANTIDAD_FER=

EXECUTE [DBO].[GUARDAR_ANIO]
	@ANIO,@CANTIDAD_FER, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--ANIO UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_ANIO(@ANIO SMALLINT,@CANTIDAD_FER INT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE AGENDAS_ANIOS SET ANIO = @ANIO,
								   CANTIDAD_FERIADOS= @CANTIDAD_FER
			WHERE ANIO = @ANIO
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @ANIO SMALLINT,@CANTIDAD_FER INT,@MSJ VARCHAR(100)
	SET @ANIO = 
 	SET @CANTIDAD_FER =  
	=

EXECUTE [DBO].[ACTUALIZAR_ANIO]
	@ANIO,@CANTIDAD_FER,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--ANIO DELETE
CREATE OR ALTER PROCEDURE DELETEAR_ANIO(@ANIO SMALLINT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM AGENDAS_ANIOS
			WHERE ANIO = @ANIO
			IF NOT EXISTS(SELECT 1 FROM AGENDAS_ANIOS WHERE ANIO = @ANIO)
				BEGIN
					SET @MSJ = 'No existe este año en la tabla'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @ANIO SMALLINT,@MSJ VARCHAR(100)
	SET @ANIO = 

EXECUTE [DBO].[DELETEAR_ANIO]
	@ANIO,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--ANIO VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_ANIO(@ANIO SMALLINT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM AGENDAS_ANIOS
			WHERE ANIO = @ANIO
			IF NOT EXISTS(SELECT 1 FROM AGENDAS_ANIOS WHERE ANIO = @ANIO)
				BEGIN
					SET @MSJ = 'No existe esta fecha en la tabla'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @ANIO SMALLINT,@MSJ VARCHAR(100)
	SET @ANIO= 

EXECUTE [DBO].[VISUALIZAR_ANIO]
	@ANIO,@MSJ OUTPUT
	PRINT @MSJ
GO
*/




-----------------------Procesos Almacenados CERTIFICACIONES
---CERTIFICACIONES CREATE
CREATE OR ALTER PROCEDURE GUARDAR_CERTIFICACIONES(@COD_CERT VARCHAR(10),@NOMB_CERTIFIC VARCHAR(30),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO CERTIFICACIONES(COD_CERTIFICACION,NOMBRE_CERTIFICACION)
				VALUES(@COD_CERT,@NOMB_CERTIFIC)
			SET @MSJ = 'Se ha agregado la certificación'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @COD_CERT VARCHAR(10),@NOMB_CERTIFIC VARCHAR(30),@MSJ VARCHAR(100)
	SET @COD_CERT=
	SET @NOMB_CERTIFIC =
	
EXECUTE [DBO].[GUARDAR_CERTIFICACIONES]
	@COD_CERT,@NOMB_CERTIFIC, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--CERTIFICACIONES UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_CERTIFICACIONES(@COD_CERT VARCHAR(10),@NOMB_CERT VARCHAR(30),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE CERTIFICACIONES SET COD_CERTIFICACION = @COD_CERT,
								   NOMBRE_CERTIFICACION = @NOMB_CERT
			WHERE COD_CERTIFICACION = @COD_CERT
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @COD_CERT VARCHAR(10),@NOMB_CERT VARCHAR(30),@MSJ VARCHAR(100)
	SET @COD_CERT = 
 	SET @NOMB_CERT =

EXECUTE [DBO].[ACTUALIZAR_CERTIFICACIONES]
	@COD_CERT,@NOMB_CERT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--CERTIFICACIONES DELETE
CREATE OR ALTER PROCEDURE DELETEAR_CERTIFICACIONES(@COD_CERT VARCHAR(10), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM CERTIFICACIONES
			WHERE COD_CERTIFICACION = @COD_CERT
			IF NOT EXISTS(SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACION = @COD_CERT)
				BEGIN
					SET @MSJ = 'No existe esta Certificacion'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_CERT VARCHAR(10),@MSJ VARCHAR(100)
	SET @COD_CERT = 

EXECUTE [DBO].[DELETEAR_CERTIFICACIONES]
	@COD_CERT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--CERTIFICACIONES VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_CERTIFICACIONES(@COD_CERT VARCHAR(10), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM CERTIFICACIONES
			WHERE COD_CERTIFICACION = @COD_CERT
			IF NOT EXISTS(SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACION = @COD_CERT)
				BEGIN
					SET @MSJ = 'No existe esta certificacion'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_CERT VARCHAR(10),@MSJ VARCHAR(100)
	SET @COD_CERT = 

EXECUTE [DBO].[VISUALIZAR_CERTIFICACIONES]
	@COD_CERT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

-----------------------Procesos Almacenados CERTIFICACIONES_PROF
---CERTIFICACIONES_PROF CREATE
CREATE OR ALTER PROCEDURE GUARDAR_CERTIFICACIONES_PROF(@COD_PROF INT,@COD_CERT VARCHAR(10),@INSTIT VARCHAR(25),@GRAD VARCHAR(20),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO CERTIFICACIONES_PROFESORES(COD_PROF,COD_CERTIFICACION_P,INSTITUCION,GRADO)
				VALUES(@COD_PROF,@COD_CERT,@INSTIT,@GRAD)
			SET @MSJ = 'Se ha agregado la certificación'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @COD_PROF INT,@COD_CERT VARCHAR(10),@INSTIT VARCHAR(25),@GRAD VARCHAR(20),@MSJ VARCHAR(100)
	SET @COD_PROF=
	SET @COD_CERT=
	SET @INSTIT=
	SET @GRAD=

EXECUTE [DBO].[GUARDAR_CERTIFICACIONES_PROF]
	@COD_PROF,@COD_CERT,@INSTIT,@GRAD, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--CERTIFICACIONES_PROF UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_CERTIFICACIONES_PROF(@COD_PROF INT,@COD_CERT VARCHAR(10),@INSTIT VARCHAR(25),@GRAD VARCHAR(20),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE CERTIFICACIONES_PROFESORES SET COD_CERTIFICACION_P = @COD_CERT,
								   INSTITUCION = @INSTIT,
								   GRADO = @GRAD

			WHERE COD_PROF = @COD_PROF AND COD_CERTIFICACION_P = @COD_CERT
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @COD_PROF INT,@COD_CERT VARCHAR(10),@INSTIT VARCHAR(25),@GRAD VARCHAR(20),@MSJ VARCHAR(100)
	SET @COD_PROF= 
 	SET @COD_CERT =
	SET @INSTIT =
	SET @GRAD =


EXECUTE [DBO].[ACTUALIZAR_CERTIFICACIONES_PROF]
	@COD_PROF,@COD_CERT,@INSTIT,@GRAD,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--CERTIFICACIONES_PROF DELETE
CREATE OR ALTER PROCEDURE DELETEAR_CERTIFICACIONES_PROF(@COD_PROF INT,@COD_CERT VARCHAR(10), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM CERTIFICACIONES_PROFESORES
			WHERE COD_CERTIFICACION_P = @COD_CERT AND COD_PROF = @COD_PROF
			IF NOT EXISTS(SELECT 1 FROM CERTIFICACIONES_PROFESORES WHERE COD_CERTIFICACION_P = @COD_CERT AND COD_PROF= @COD_PROF)
				BEGIN
					SET @MSJ = 'No existe esta Certificacion'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_PROF INT,@COD_CERT VARCHAR(10),@MSJ VARCHAR(100)
	SET @COD_CERT = 

EXECUTE [DBO].[DELETEAR_CERTIFICACIONES_PROF]
	@COD_CERT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--CERTIFICACIONES_PROF VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_CERTIFICACIONES_PROF(@COD_PROF INT,@COD_CERT VARCHAR(10), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM CERTIFICACIONES_PROFESORES
			WHERE COD_CERTIFICACION_P = @COD_CERT AND COD_PROF = @COD_PROF
			IF NOT EXISTS(SELECT 1 FROM CERTIFICACIONES_PROFESORES WHERE COD_CERTIFICACION_P = @COD_CERT AND COD_PROF = @COD_PROF)
				BEGIN
					SET @MSJ = 'No existe esta certificacion'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO


/*
DECLARE @COD_PROF INT,@COD_CERT VARCHAR(10),@MSJ VARCHAR(100)
	SET @COD_PROF =
	SET @COD_CERT = 

EXECUTE [DBO].[VISUALIZAR_CERTIFICACIONES_PROF]
	@COD_PROF, @COD_CERT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

-----------------------Procesos Almacenados HORARIOS
---HORARIOS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_HORARIOS(@COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO HORARIOS(COD_MATERIA_ABIERTA,HORA_INICIO,HORA_FIN,DIA_SEMANA)
				VALUES(@COD_MATE,@H_INICIO,@H_FIN,@D_SEM)
			SET @MSJ = 'Se ha agregado el horario de la materia'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1),@MSJ VARCHAR(100)
	SET @COD_MATE=
	SET @H_INICIO =
	SET @H_FIN =
	SET @D_SEM =

EXECUTE [DBO].[GUARDAR_HORARIOS]
	@COD_MATE,@H_INICIO,@H_FIN,@D_SEM, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--HORARIOS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_HORARIOS(@COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE HORARIOS SET COD_MATERIA_ABIERTA = @COD_MATE,
								   HORA_INICIO = @H_INICIO,
								   HORA_FIN = @H_FIN,
								   DIA_SEMANA = @D_SEM

			WHERE COD_MATERIA_ABIERTA = @COD_MATE AND DIA_SEMANA = @D_SEM
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1),@MSJ VARCHAR(100)
	SET @COD_MATE=
	SET @H_INICIO =
	SET @H_FIN =
	SET @D_SEM =


EXECUTE [DBO].[ACTUALIZAR_HORARIOS]
	@COD_MATE,@H_INICIO,@H_FIN,@D_SEM,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--HORARIOS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_HORARIOS(@COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM HORARIOS
			WHERE COD_MATERIA_ABIERTA = @COD_MATE AND HORA_INICIO = @H_INICIO AND HORA_FIN = @H_FIN AND DIA_SEMANA = @D_SEM
			IF NOT EXISTS(SELECT 1 FROM HORARIOS WHERE COD_MATERIA_ABIERTA = @COD_MATE AND HORA_INICIO = @H_INICIO AND HORA_FIN = @H_FIN AND DIA_SEMANA = @D_SEM)
				BEGIN
					SET @MSJ = 'No existe el horario solicitado'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1),@MSJ VARCHAR(100)
	SET @COD_MATE=
	SET @H_INICIO =
	SET @H_FIN =
	SET @D_SEM =


EXECUTE [DBO].[DELETEAR_HORARIOS]
	@COD_MATE,@H_INICIO,@H_FIN,@D_SEM,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--HORARIOS VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_HORARIOS(@COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1), @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM HORARIOS
			WHERE COD_MATERIA_ABIERTA = @COD_MATE AND HORA_INICIO = @H_INICIO AND HORA_FIN = @H_FIN AND DIA_SEMANA = @D_SEM
			IF NOT EXISTS(SELECT 1 FROM HORARIOS WHERE COD_MATERIA_ABIERTA = @COD_MATE AND HORA_INICIO = @H_INICIO AND HORA_FIN = @H_FIN AND DIA_SEMANA = @D_SEM)
				BEGIN
					SET @MSJ = 'No existe el horario consultado'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO


/*
DECLARE @COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1),@MSJ VARCHAR(100)
	SET @COD_MATE=
	SET @H_INICIO =
	SET @H_FIN =
	SET @D_SEM =

EXECUTE [DBO].[VISUALIZAR_HORARIOS]
	@COD_MATE,@H_INICIO,@H_FIN,@D_SEM,@MSJ OUTPUT
	PRINT @MSJ
GO
*/


-----------------------Procesos Almacenados LABORATORIOS
---LABORATORIOS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_LABORATORIOS(@UBICACION VARCHAR(50),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO LABORATORIOS(UBICACION)
				VALUES(@UBICACION)
			SET @MSJ = 'Se ha agregado el laboratorio'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @COD_MATE INT,@H_INICIO TIME,@H_FIN TIME,@D_SEM VARCHAR(1),@MSJ VARCHAR(100)
	SET @COD_MATE=
	SET @H_INICIO =
	SET @H_FIN =
	SET @D_SEM =

EXECUTE [DBO].[GUARDAR_HORARIOS]
	@COD_MATE,@H_INICIO,@H_FIN,@D_SEM, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--LABORATORIOS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_LABORATORIOS(@ID_LAB INT,@UBICACION VARCHAR(50),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE LABORATORIOS SET UBICACION = @UBICACION

			WHERE ID_LABORATORIO = @ID_LAB
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @ID_LAB INT,@UBICACION VARCHAR(50),@MSJ VARCHAR(100)
	SET @ID_LAB=
	SET @UBICACION =

EXECUTE [DBO].[ACTUALIZAR_LABORATORIOS]
	@ID_LAB,@UBICACION,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--LABORATORIOS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_LABORATORIOS(@ID_LAB INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM LABORATORIOS
			WHERE ID_LABORATORIO = @ID_LAB
			IF NOT EXISTS(SELECT 1 FROM LABORATORIOS WHERE ID_LABORATORIO = @ID_LAB)
				BEGIN
					SET @MSJ = 'No existe el laboratorio'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @ID_LAB INT,@MSJ VARCHAR(100)
	SET @ID_LAB =

EXECUTE [DBO].[DELETEAR_LABORATORIOS]
	@ID_LAB,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--LABORATORIOS VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_LABORATORIOS(@ID_LAB INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM LABORATORIOS
			WHERE ID_LABORATORIO = @ID_LAB
			IF NOT EXISTS(SELECT 1 FROM LABORATORIOS WHERE ID_LABORATORIO = @ID_LAB)
			BEGIN
					SET @MSJ = 'No existe el laboratorio consultado'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO


/*
DECLARE @ID_LAB INT,@MSJ VARCHAR(100)
	SET @ID_LAB=

EXECUTE [DBO].[VISUALIZAR_LABORATORIOS]
	@ID_LAB,@MSJ OUTPUT
	PRINT @MSJ
GO
*/


-----------------------Procesos Almacenados MATERIAS
---MATERIAS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_MATERIAS(@ID_PROG INT, @COD_CERT VARCHAR(10),@NOMB_MAT VARCHAR(50),@DURACION INT,
						@REQUI VARCHAR(20),@COSTO_MAT INT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO MATERIAS(ID_PROGRAMA,COD_CERTIFICACION,NOMBRE_MATERIA,DURACION,REQUISITO,COSTO_MATERIA)
				VALUES(@ID_PROG,@COD_CERT,@NOMB_MAT,@DURACION,@REQUI,@COSTO_MAT)
			SET @MSJ = 'Se ha agregado la materia'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @ID_PROG INT, @COD_CERT VARCHAR(10),@NOMB_MAT VARCHAR(50),@DURACION INT,
						@REQUI VARCHAR(20),@COSTO_MAT INT,@MSJ VARCHAR(100)
	SET ID_PROG =
	SET @COD_CERT = 
	SET @NOMB_MAT =
	SET @DURACION =
	SET @REQUI = 
	SET @COSTO_MAT = 

EXECUTE [DBO].[GUARDAR_MATERIAS]
	@ID_PROG,@COD_CERT,@NOMB_MAT,@DURACION,@REQUI,@COSTO_MAT, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATERIAS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_MATERIAS(@COD_MAT INT, @ID_PROG INT, @COD_CERT VARCHAR(10),@NOMB_MAT VARCHAR(50),@DURACION INT,
						@REQUI VARCHAR(20),@COSTO_MAT INT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE MATERIAS SET ID_PROGRAMA = @ID_PROG,
								COD_CERTIFICACION = @COD_CERT,
								NOMBRE_MATERIA = @NOMB_MAT,
								DURACION = @DURACION,
								REQUISITO = @REQUI,
								COSTO_MATERIA = @COSTO_MAT								

			WHERE COD_MATERIA = @COD_MAT
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @COD_MAT INT, @ID_PROG INT, @COD_CERT VARCHAR(10),@NOMB_MAT VARCHAR(50),@DURACION INT,
						@REQUI VARCHAR(20),@COSTO_MAT INT,@MSJ VARCHAR(100)
	SET ID_PROG =
	SET @COD_CERT = 
	SET @NOMB_MAT =
	SET @DURACION =
	SET @REQUI = 
	SET @COSTO_MAT =

EXECUTE [DBO].[ACTUALIZAR_MATERIAS]
	@COD_MAT,@ID_PROG,@COD_CERT,@NOMB_MAT,@DURACION,@REQUI,@COSTO_MAT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATERIAS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_MATERIAS(@COD_MAT INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM MATERIAS
			WHERE COD_MATERIA = @COD_MAT
			IF NOT EXISTS(SELECT 1 FROM MATERIAS WHERE COD_MATERIA = @COD_MAT)
				BEGIN
					SET @MSJ = 'No existe la materia'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_MAT INT,@MSJ VARCHAR(100)
	SET @COD_MAT =

EXECUTE [DBO].[DELETEAR_MATERIAS]
	@COD_MAT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATERIAS VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_MATERIAS(@COD_MAT INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM MATERIAS
			WHERE COD_MATERIA = @COD_MAT
			IF NOT EXISTS(SELECT 1 FROM MATERIAS WHERE COD_MATERIA = @COD_MAT)
			BEGIN
					SET @MSJ = 'No existe la materia consultada'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO


/*
DECLARE @COD_MAT INT,@MSJ VARCHAR(100)
	SET @COD_MAT=

EXECUTE [DBO].[VISUALIZAR_MATERIAS]
	@COD_MAT,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

-----------------------Procesos Almacenados MATERIAS_ABIERTAS
---MATERIAS_ABIERTAS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_MATERIAS_ABIERTAS(@ID_LAB INT, @COD_PROF INT,@COD_MAT INT,@DIA_INICIO DATE,
						@DIA_FIN DATE,@ANIO SMALLINT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO MATERIAS_ABIERTAS(ID_LABORATORIO,COD_PROF,COD_MATERIA,DIA_INICIO,DIA_FIN,ANIO)
				VALUES(@ID_LAB,@COD_PROF,@COD_MAT,@DIA_INICIO,@DIA_FIN,@ANIO)
			SET @MSJ = 'Se ha agregado la materia'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @ID_LAB INT, @COD_PROF INT,@COD_MAT INT,@DIA_INICIO DATE,
						@DIA_FIN DATE,@ANIO SMALLINT,@MSJ VARCHAR(100)
	SET @ID_LAB =
	SET @COD_PROF= 
	SET @COD_MAT=
	SET @DIA_INICIO=
	SET @DIA_FIN =
	SET @ANIO=

EXECUTE [DBO].[GUARDAR_MATERIAS_ABIERTAS]
	@ID_LAB,@COD_PROF,@COD_MAT,@DIA_INICIO,@DIA_FIN,@ANIO, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATERIAS_ABIERTAS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_MATERIAS_ABIERTAS(@COD_MAT_AB INT,@ID_LAB INT, @COD_PROF INT,@COD_MAT INT,@DIA_INICIO DATE,
						@DIA_FIN DATE,@ANIO SMALLINT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE MATERIAS_ABIERTAS SET ID_LABORATORIO = @ID_LAB,
								COD_PROF = @COD_PROF,
								COD_MATERIA = @COD_MAT_AB,
								DIA_INICIO = @DIA_INICIO,
								DIA_FIN = @DIA_FIN,
								ANIO = @ANIO								

			WHERE COD_MATERIA_ABIERTA = @COD_MAT_AB
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @COD_MAT_AB INT,@ID_LAB INT, @COD_PROF INT,@COD_MAT INT,@DIA_INICIO DATE,
						@DIA_FIN DATE,@ANIO SMALLINT,@MSJ VARCHAR(100)
	SET @COD_MAT_AB =
	SET @ID_LAB =
	SET @COD_PROF= 
	SET @COD_MAT=
	SET @DIA_INICIO=
	SET @DIA_FIN =
	SET @ANIO=

EXECUTE [DBO].[ACTUALIZAR_MATERIAS_ABIERTAS]
	@COD_MAT_AB,@ID_LAB,@COD_PROF,@COD_MAT,@DIA_INICIO,@DIA_FIN,@ANIO,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATERIAS_ABIERTAS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_MATERIAS_ABIERTAS(@COD_MAT_AB INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM MATERIAS_ABIERTAS
			WHERE COD_MATERIA_ABIERTA = @COD_MAT_AB
			IF NOT EXISTS(SELECT 1 FROM MATERIAS_ABIERTAS WHERE COD_MATERIA_ABIERTA = @COD_MAT_AB)
				BEGIN
					SET @MSJ = 'No existe la materia abierta'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @COD_MAT_AB INT,@MSJ VARCHAR(100)
	SET @COD_MAT_AB =

EXECUTE [DBO].[DELETEAR_MATERIAS_ABIERTAS]
	@COD_MAT_AB,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--MATERIAS_ABIERTAS VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_MATERIAS_ABIERTAS(@COD_MAT_AB INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM MATERIAS_ABIERTAS
			WHERE COD_MATERIA_ABIERTA = @COD_MAT_AB
			IF NOT EXISTS(SELECT 1 FROM MATERIAS_ABIERTAS WHERE COD_MATERIA_ABIERTA = @COD_MAT_AB)
			BEGIN
					SET @MSJ = 'No existe la materia consultada'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO


/*
DECLARE @COD_MAT_AB INT,@MSJ VARCHAR(100)
	SET @COD_MAT_AB=

EXECUTE [DBO].[VISUALIZAR_MATERIAS_ABIERTAS]
	@COD_MAT_AB,@MSJ OUTPUT
	PRINT @MSJ
GO
*/


-----------------------Procesos Almacenados PAGOS
---PAGOS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_PAGOS(@N_MATRI INT, @COD_MAT_AB INT,@ESTADO_MAT VARCHAR(3),
						@NOTA SMALLINT,@EST_PAGO VARCHAR(10),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO PAGOS(NUM_MATRICULA,COD_MATERIA_ABIERTA,ESTADO_MAT,NOTA,ESTADO_PAGO)
				VALUES(@N_MATRI,@COD_MAT_AB,@ESTADO_MAT,@NOTA,@EST_PAGO)
			SET @MSJ = 'Se ha agregado la informacion de pago'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @N_MATRI INT, @COD_MAT_AB INT,@ESTADO_MAT VARCHAR(3),
						@NOTA SMALLINT,@EST_PAGO VARCHAR(10),@MSJ VARCHAR(100)
	SET @N_MATRI=
	SET @COD_MAT_AB=
	SET @ESTADO_MAT=
	SET @NOTA =
	SET @EST_PAGO =

EXECUTE [DBO].[GUARDAR_PAGOS]
	@N_MATRI,@COD_MAT_AB,@ESTADO_MAT,@NOTA,@EST_PAGO, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PAGOS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_PAGOS(@N_MATRI INT, @COD_MAT_AB INT,@ESTADO_MAT VARCHAR(3),
						@NOTA SMALLINT,@EST_PAGO VARCHAR(10),@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE PAGOS SET NUM_MATRICULA = @N_MATRI,
								COD_MATERIA_ABIERTA= @COD_MAT_AB,
								ESTADO_MAT = @ESTADO_MAT,
								NOTA = @NOTA,
								ESTADO_PAGO = @EST_PAGO								

			WHERE NUM_MATRICULA = @N_MATRI
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @N_MATRI INT, @COD_MAT_AB INT,@ESTADO_MAT VARCHAR(3),
						@NOTA SMALLINT,@EST_PAGO VARCHAR(10),@MSJ VARCHAR(100)
	SET @N_MATRI=
	SET @COD_MAT_AB=
	SET @ESTADO_MAT=
	SET @NOTA =
	SET @EST_PAGO =


EXECUTE [DBO].[ACTUALIZAR_PAGOS]
	@N_MATRI,@COD_MAT_AB,@ESTADO_MAT,@NOTA,@EST_PAGO,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PAGOS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_PAGOS(@N_MATRI INT,@COD_MAT_AB INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM PAGOS
			WHERE NUM_MATRICULA = @N_MATRI AND COD_MATERIA_ABIERTA = @COD_MAT_AB
			IF NOT EXISTS(SELECT 1 FROM PAGOS WHERE NUM_MATRICULA = @N_MATRI AND COD_MATERIA_ABIERTA = @COD_MAT_AB)
				BEGIN
					SET @MSJ = 'No existe registro de este pago'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @N_MATRI INT,@COD_MAT_AB INT,@MSJ VARCHAR(100)
	SET @N_MATRI=
	SET @COD_MAT_AB =

EXECUTE [DBO].[DELETEAR_PAGOS]
	@N_MATRI,@COD_MAT_AB,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PAGOS VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_PAGOS(@N_MATRI INT,@COD_MAT_AB INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM PAGOS
			WHERE NUM_MATRICULA = @N_MATRI AND COD_MATERIA_ABIERTA = @COD_MAT_AB
			IF NOT EXISTS(SELECT 1 FROM PAGOS WHERE NUM_MATRICULA = @N_MATRI AND COD_MATERIA_ABIERTA = @COD_MAT_AB)
			BEGIN
					SET @MSJ = 'No existe el pago consultado'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO


/*
DECLARE @N_MATRI INT,@COD_MAT_AB INT,@MSJ VARCHAR(100)
	SET @N_MATRI=
	SET @COD_MAT_AB=

EXECUTE [DBO].[VISUALIZAR_PAGOS]
	@N_MATRI, @COD_MAT_AB,@MSJ OUTPUT
	PRINT @MSJ
GO
*/


-----------------------Procesos Almacenados PROGRAMAS
---PROGRAMAS CREATE
CREATE OR ALTER PROCEDURE GUARDAR_PROGRAMAS(@NOMB_PROGRAM VARCHAR(50),@NUME_CURSOS INT,@DUR_HORAS INT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			INSERT INTO PROGRAMAS(NOMBRE_PROGRAMA,NUMERO_CURSOS,DURACION_HORAS)
				VALUES(@NOMB_PROGRAM,@NUME_CURSOS,@DUR_HORAS)
			SET @MSJ = 'Se ha agregado el programa'
		COMMIT TRANSACTION
	END TRY
  BEGIN CATCH
	ROLLBACK TRANSACTION
	SET @MSJ = ERROR_MESSAGE()
  END CATCH
GO
/*
DECLARE @NOMB_PROGRAM VARCHAR(50),@NUME_CURSOS INT,@DUR_HORAS INT,@MSJ VARCHAR(100)

	SET @NOMB_PROGRAM=
	SET @NUME_CURSOS=
	SET @DUR_HORAS=

EXECUTE [DBO].[GUARDAR_PROGRAMAS]
	@NOMB_PROGRAM,@NUME_CURSOS,@DUR_HORAS, @MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PROGRAMAS UPDATE
CREATE OR ALTER PROCEDURE ACTUALIZAR_PROGRAMAS(@ID_PROG INT,@NOMB_PROGRAM VARCHAR(50),@NUME_CURSOS INT,
												@DUR_HORAS INT,@MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			UPDATE PROGRAMAS SET NOMBRE_PROGRAMA = @NOMB_PROGRAM,
								NUMERO_CURSOS= @NUME_CURSOS,
								DURACION_HORAS = @DUR_HORAS							

			WHERE ID_PROGRAMA = @ID_PROG
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*
DECLARE @ID_PROG INT,@NOMB_PROGRAM VARCHAR(50),@NUME_CURSOS INT,
												@DUR_HORAS INT,@MSJ VARCHAR(100)
	SET @ID_PROG=
	SET @NOMB_PROGRAM=
	SET @NUME_CURSOS=
	SET @DUR_HORAS=



EXECUTE [DBO].[ACTUALIZAR_PROGRAMAS]
	@ID_PROG,@NOMB_PROGRAM,@NUME_CURSOS,@DUR_HORAS,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PAGOS DELETE
CREATE OR ALTER PROCEDURE DELETEAR_PROGRAMAS(@ID_PROG INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM PROGRAMAS
			WHERE ID_PROGRAMA = @ID_PROG
			IF NOT EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA = @ID_PROG)
				BEGIN
					SET @MSJ = 'No existe el programa consultado'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
/*
DECLARE @ID_PROG INT,@MSJ VARCHAR(100)
	SET @ID_PROG=

EXECUTE [DBO].[DELETEAR_PROGRAMAS]
	@ID_PROG,@MSJ OUTPUT
	PRINT @MSJ
GO
*/

--PROGRAMAS VISUALIZAR
CREATE OR ALTER PROCEDURE VISUALIZAR_PROGRAMAS(@ID_PROG INT, @MSJ VARCHAR(100)OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			SELECT * FROM PROGRAMAS
			WHERE ID_PROGRAMA = @ID_PROG
			IF NOT EXISTS(SELECT 1 FROM PROGRAMAS WHERE ID_PROGRAMA = @ID_PROG)
			BEGIN
					SET @MSJ = 'No existe el programa consultado'
				END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO


/*
DECLARE @ID_PROG INT,@MSJ VARCHAR(100)
	SET @ID_PROG=

EXECUTE [DBO].[VISUALIZAR_PROGRAMAS]
	@ID_PROG,@MSJ OUTPUT
	PRINT @MSJ
GO
*/
